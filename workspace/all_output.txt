Given the requirements and assumptions, the following classes and methods will be necessary:

1. `Paddle` class: Represents a player's paddle. It will have methods to move the paddle up and down.
2. `Ball` class: Represents the ball. It will have methods to move the ball and detect collisions with the paddles and walls.
3. `Game` class: Represents the game itself. It will have methods to start, pause, and restart the game, update the game state, and render the game.
4. `Main` class: The entry point of the application. It will create an instance of the `Game` class and start the game loop.

Now, let's proceed with the implementation of each class.

Main.java
```java
import javax.swing.JFrame;

public class Main {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Pong Game");
        Game game = new Game();
        frame.add(game);
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        game.start();
    }
}
```

Game.java
```java
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class Game extends JPanel implements KeyListener, Runnable {
    private static final long serialVersionUID = 1L;
    private Paddle player1, player2;
    private Ball ball;
    private Thread thread;
    private boolean running;
    private int score1, score2;

    public Game() {
        setFocusable(true);
        addKeyListener(this);
        player1 = new Paddle(50, 250, 1);
        player2 = new Paddle(750, 250, 2);
        ball = new Ball(400, 300);
    }

    public void start() {
        running = true;
        thread = new Thread(this);
        thread.start();
    }

    public void run() {
        while (running) {
            update();
            repaint();
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public void update() {
        player1.update();
        player2.update();
        ball.update();
        checkCollision();
        checkScore();
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, 800, 600);
        player1.paint(g);
        player2.paint(g);
        ball.paint(g);
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.PLAIN, 50));
        g.drawString(String.valueOf(score1), 300, 50);
        g.drawString(String.valueOf(score2), 500, 50);
    }

    public void checkCollision() {
        // Implement collision detection logic here
    }

    public void checkScore() {
        // Implement scoring logic here
    }

    public void keyPressed(KeyEvent e) {
        // Implement key press handling here
    }

    public void keyReleased(KeyEvent e) {
        // Implement key release handling here
    }

    public void keyTyped(KeyEvent e) {
        // This method is not used but is required by the KeyListener interface
    }
}
```

Paddle.java
```java
import java.awt.Graphics;
import java.awt.Color;

public class Paddle {
    private int x, y;
    private int speed = 2;
    private int width = 20, height = 80;
    private int id;

    public Paddle(int x, int y, int id) {
        this.x = x;
        this.y = y;
        this.id = id;
    }

    public void update() {
        // Implement paddle movement logic here
    }

    public void paint(Graphics g) {
        g.setColor(Color.WHITE);
        g.fillRect(x, y, width, height);
    }

    public void moveUp() {
        y -= speed;
    }

    public void moveDown() {
        y += speed;
    }
}
```

Ball.java
```java
import java.awt.Graphics;
import java.awt.Color;

public class Ball {
    private int x, y;
    private int speedX = 2, speedY = 2;
    private int size = 20;

    public Ball(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void update() {
        x += speedX;
        y += speedY;
    }

    public void paint(Graphics g) {
        g.setColor(Color.WHITE);
        g.fillOval(x, y, size, size);
    }

    public void reverseX() {
        speedX = -speedX;
    }

    public void reverseY() {
        speedY = -speedY;
    }
}
```

README.md
```markdown
# Pong Game

This is a simple Pong game implemented in Java.

## How to Compile and Run

1. Compile the Java files:
   ```
   javac Main.java Game.java Paddle.java Ball.java
   ```
2. Run the game:
   ```
   java Main
   ```

## How to Play

- Player 1 controls the left paddle using the 'W' and 'S' keys.
- Player 2 controls the right paddle using the 'Up' and 'Down' arrow keys.
- The game starts as soon as it is run. Press 'Enter' to pause and unpause the game.
- A player scores a point when the ball reaches the opponent's end of the screen.
- The game can be restarted by pausing and then unpausing the game.
```

Please note that the `checkCollision()`, `checkScore()`, `keyPressed()`, and `keyReleased()` methods in the `Game` class, and the `update()` method in the `Paddle` class are not fully implemented. These methods will contain the game logic for collision detection, scoring, and paddle movement, respectively. The exact implementation will depend on the specific requirements and rules of the game.